What is the this Pointer in C++?
•	In C++, this is a special pointer available in non-static member functions.
•	It points to the calling object — i.e., the object on which the member function is invoked.
class MyClass {
    int x;
public:
    void setX(int x) {
        this->x = x;  // disambiguates between parameter and member variable
    }
};

Property	Description
Type	Pointer to the current class (ClassName*)
Scope	Only inside non-static member functions
Value	Address of the calling object
Modifiable?	Cannot change this
Dereference	*this gives the current object

Important Notes
•	this is not available in static member functions (since static functions don't belong to an object).
•	*this refers to the current object (dereferencing the this pointer).
•	In const member functions, the type of this is:
const ClassName* const this
(i.e., pointer to const object and const pointer)


 1. What is the purpose of the this pointer?
The this pointer is used to refer to the calling object inside a non-static member function.
It helps to:
•	Access member variables and functions.
•	Disambiguate between member and parameter names.
•	Return the current object.
•	Support method chaining and pass the object to external functions.

✅ 2. Why can't this be used in static member functions?
Because static member functions are not associated with any object instance — they belong to the class, not an object.
Since this points to the calling object, it doesn’t make sense in a static context where no object exists.

 3. What is the type of this in a const member function?
const ClassName* const this;


4. Can you use this to return the current object?
Yes. You can return the current object using *this.
•	Return by reference: for chaining/mutation.
•	Return by value: to return a copy.
