 What are static members?
•	Static member variables: Shared across all objects of a class.
•	Static member functions: Belong to the class itself, not to any particular object.

They are declared with the static keyword inside the class, but defined outside (for variables).

 1. Static Member Variables
📌 Key Points:
•	Single copy shared by all instances.
•	Exists independently of any object.
•	Must be defined outside the class.
•	Can be accessed using:
o	Class name: ClassName::variable
o	Object: obj.variable (allowed, but not preferred)
class Counter {
public:
    static int count;
    Counter() { ++count; }
};

int Counter::count = 0;  // Definition outside the class

int main() {
    Counter a, b;
    cout << Counter::count;  // Output: 2
}

Shared Across All Objects**********

A static data member belongs to the class, not to any individual object.

Memory for a static member is allocated only once, at class level, not per object.

Declaration vs Definition

Inside the class:

class Test {
    static int count;  // declaration only
};


This tells the compiler: “There is a static member count of type int.”

No memory is allocated yet.

Outside the class:

int Test::count = 0;  // definition + memory allocation


Memory is allocated for the static variable.

Without this, the linker will give an “undefined reference” error if you try to use it.

Key Points for Interview*************

Static members are class-wide, not per-object.

Declaration inside the class only tells the compiler type and name.

Definition outside the class actually allocates memory.********

Cannot initialize static members inside class (except const integral types or inline static in C++17+).

*****statis member functions****
Static Member Functions

Definition:

A static member function belongs to the class, not to any object.

It can be called without creating an instance of the class.

Key Points:

Cannot access non-static members directly

Because it does not have a this pointer (no object context).

Can access static data members

Since static members exist independently of objects.

Called using class name or object

Preferred: ClassName::FunctionName().

class Test {
public:
    static int count;               // static data member
    static void showCount() {       // static member function
        cout << "Count: " << count << endl;
    }
};

int Test::count = 0;

int main() {
    Test::count = 5;        // access static data
    Test::showCount();      // call static function without object

    Test t1;
    t1.showCount();         // also valid but less preferred
}


Key Points for Interviews

No this pointer

Static functions are independent of any object.

Access only static members

Cannot directly access non-static members or call non-static functions.

Memory efficiency

Only one copy exists, shared among all objects.

Use cases

Utility/helper functions not needing object context.

Counting objects using static data members.

counting objects:
class Employee {
    static int employeeCount;  // static data member
public:
    Employee() { employeeCount++; }
    static void showEmployeeCount() { cout << employeeCount << endl; }
};

int Employee::employeeCount = 0;

int main() {
    Employee e1, e2, e3;
    Employee::showEmployeeCount();  // prints 3
}


“Static member functions exist at the class level, do not have a this pointer, can access only static members, and are called using ClassName::Function().”






