Overloading the function call operator () in C++ is a common interview topic. It lets your objects behave like functions, which is especially useful for functors (function objects) in the STL.

üîπ Key Points

operator() allows you to call an object like a function.

You can overload it with any number of arguments and return types.

Common use cases:

Functors for std::sort, std::for_each

Callbacks

Wrapping complex calculations inside objects

‚ÄúOverloading () lets an object behave like a function. This is widely used in STL algorithms as functors.‚Äù

‚úÖ Interview-ready summary:

"By overloading operator(), we can make objects callable like functions. This is commonly used to create functors in the STL, which can store state and be passed to algorithms like std::sort, std::for_each, or std::count_if."

#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

class isEven
{
public:
bool operator()(int val)
{
    return val%2 == 0;
}
};

int main()
{
   vector<int> vec = {1,2,3,4,5,6,7,8};
   auto count = count_if(vec.begin(),vec.end(),isEven());
   cout<<"number of even values "<<count<<endl;
   return 0;
}
 

