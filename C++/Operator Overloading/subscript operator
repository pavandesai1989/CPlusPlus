"Overloading the subscript operator [] allows objects to behave like arrays. 
We return a reference for non-const objects 
so that elements can be modified, and a const reference for const objects to allow read-only access.
This is how classes like std::vector implement array-like access."




#include <iostream>
using namespace std;

class MyArray {
private:
    int* data;
    size_t size;

public:
    MyArray(size_t s) : size(s) {
        data = new int[size];
        for (size_t i = 0; i < size; ++i)
            data[i] = 0;
    }

    ~MyArray() { delete[] data; }

    // Overload [] for non-const objects
    int& operator[](size_t index) {
        if (index >= size) {
            throw out_of_range("Index out of bounds");
        }
        return data[index];
    }

    // Overload [] for const objects
    const int& operator[](size_t index) const {
        if (index >= size) {
            throw out_of_range("Index out of bounds");
        }
        return data[index];
    }

    size_t getSize() const { return size; }
};

int main() {
    MyArray arr(5);

    // Using [] to assign values
    for (size_t i = 0; i < arr.getSize(); ++i)
        arr[i] = i * 10;

    // Using [] to read values
    for (size_t i = 0; i < arr.getSize(); ++i)
        cout << arr[i] << " ";  // 0 10 20 30 40

    cout << endl;

    // Const object usage
    const MyArray& constArr = arr;
    cout << "First element of const array: " << constArr[0] << endl;

    return 0;
}
