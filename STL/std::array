std::array is a fixed-size container â€” size is known at compile-time.

Unlike raw arrays, std::array supports STL algorithms, iterators, and member functions.

Safer and more expressive than C-style arrays.

| Method                  | Return Type              | Purpose / Description                                       | Example Usage                        |
| ----------------------- | ------------------------ | ----------------------------------------------------------- | ------------------------------------ |
| `size()`                | `constexpr size_t`       | Returns number of elements in the array                     | `arr.size()`                         |
| `at(index)`             | `T&` / `const T&`        | Safe, bounds-checked access to element at `index`           | `arr.at(2)`                          |
| `operator[]`            | `T&` / `const T&`        | Fast, unsafe access to element at `index` (no bounds check) | `arr[2]`                             |
| `front()`               | `T&` / `const T&`        | Access first element                                        | `arr.front()`                        |
| `back()`                | `T&` / `const T&`        | Access last element                                         | `arr.back()`                         |
| `fill(value)`           | `void`                   | Assign `value` to all elements                              | `arr.fill(0)`                        |
| `begin()` / `end()`     | `iterator`               | Begin / end iterator (for looping or STL use)               | `for (auto it = arr.begin(); ...)`   |
| `cbegin()` / `cend()`   | `const_iterator`         | Const iterators for read-only access                        | `for (auto it = arr.cbegin(); ...)`  |
| `rbegin()` / `rend()`   | `reverse_iterator`       | Reverse iterators                                           | `for (auto it = arr.rbegin(); ...)`  |
| `crbegin()` / `crend()` | `const_reverse_iterator` | Const reverse iterators                                     | `for (auto it = arr.crbegin(); ...)` |
| `data()`                | `T*`                     | Pointer to underlying array                                 | `int* p = arr.data()`                |
| `empty()`               | `constexpr bool`         | Check if array is empty (always `false` if size > 0)        | `arr.empty()`                        |
| `swap(other)`           | `void`                   | Swaps contents with another `std::array`                    | `arr.swap(other)`                    |


Can You Delete an Element from std::array?
ðŸ‘‰ No, you cannot truly delete an element from a std::array.

 Why?
std::array<T, N> is a fixed-size container â€” it's essentially a wrapper around a C-style array.

The size N is known and constant at compile time.

You cannot resize it (no push_back, no erase, no resize, etc.).


#include <iostream>
#include <array>
using namespace std;

int main() {
    // Declare and initialize a std::array with 5 elements
    std::array<int, 5> arr = {1, 2, 3, 4, 5};

    // 1. size() - returns number of elements in the array
    cout << "Size of array: " << arr.size() << endl;

    // 2. at(index) - bounds-checked element access
    cout << "Element at index 2 (using at()): " << arr.at(2) << endl;
    // Uncommenting the below line will throw std::out_of_range
    // cout << arr.at(10) << endl;

    // 3. operator[] - element access without bounds checking
    cout << "Element at index 3 (using []): " << arr[3] << endl;

    // 4. front() - first element
    cout << "First element: " << arr.front() << endl;

    // 5. back() - last element
    cout << "Last element: " << arr.back() << endl;

    // 6. fill(value) - fills entire array with the given value
    arr.fill(9);
    cout << "Array after fill(9): ";
    for (int x : arr) {
        cout << x << " ";
    }
    cout << endl;

    // 7. begin() and end() - iterators for range-based for loop or STL algorithms
    cout << "Iterating using iterators: ";
    for (auto it = arr.begin(); it != arr.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;

    // 8. data() - returns raw pointer to the underlying array
    int* ptr = arr.data();
    cout << "Access via data(): ";
    for (size_t i = 0; i < arr.size(); ++i) {
        cout << *(ptr + i) << " ";
    }
    cout << endl;

    return 0;
}
