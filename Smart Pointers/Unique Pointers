
How unique_ptr solves the issue of auto_ptr in C++? *******+
#include<memory> is the header
Ownership Model
•	Unique Ownership: A unique_ptr owns the resource it points to exclusively.
   o	You cannot copy a unique_ptr. Copying it would lead to a compiler error.
   o	Ownership can be transferred using std::move, but after the move, the original unique_ptr is null.

Custom Deleters  *****
When you define a std::unique_ptr<T, D>, you're telling it:

T = the type of the object it manages (e.g. Resource)

D = the type of the custom deleter (e.g. CustomDeleter class)

•	You can specify a custom deleter if you need to perform some additional cleanup when the unique_ptr goes out of scope.
#include <iostream>
#include <memory>

class Resource {
public:
    Resource() {
        std::cout << "Resource acquired\n";
    }

    ~Resource() {
        std::cout << "Resource destroyed\n";
    }

    void say_hello() const {
        std::cout << "Hello from Resource\n";
    }
};

// Custom deleter class
class CustomDeleter {
public:
    void operator()(Resource* ptr) const {
        std::cout << "CustomDeleter called\n";
        delete ptr;
    }
};

int main() {
    // unique_ptr with a custom deleter class
    std::unique_ptr<Resource, CustomDeleter> ptr(new Resource);

    ptr->say_hello();

    // CustomDeleter will be called when ptr goes out of scope
    return 0;
}

call custom deletor explicitly 
int main() {
    std::unique_ptr<Resource, CustomDeleter> ptr(new Resource);
    
    // Explicitly call the custom deleter
    CustomDeleter deleter;
    Resource* raw = ptr.release();  // release ownership without deleting
    deleter(raw);  // manually delete  ******

    // ptr now holds nullptr and will not try to delete anything
    return 0;
}



reset() and release()
•	reset(): Releases ownership of the resource and optionally replaces it with a new resource.
p.reset(new int(20));  // Releases old memory and points to new memory

•	release(): Releases ownership without deleting the resource, returning the raw pointer.
int* rawPtr = p.release();  // p no longer owns the resource

What happens when you try to copy a unique_ptr?
When you attempt to copy a unique_ptr, the compiler will produce a compile-time error. This is because std::unique_ptr is move-only, 
meaning it cannot be copied to prevent accidental ownership transfer.

std::unique_ptr<int> ptr = std::make_unique<int>(10);
std::vector<std::unique_ptr<int>> vec;
vec.push_back(std::move(ptr));  // Moves ownership into the vector
// ptr is now null, and the vector holds the resource

Create unique_ptr ******
std::make_unique<T>()
Why: This function ensures that memory is allocated safely, without the need to call new manually. 
std::unique_ptr<int> ptr = std::make_unique<int>(10);  // Allocates an int with value 10

reset()
•	Purpose: Releases ownership of the current resource and optionally takes ownership of a new resource.
std::unique_ptr<int> ptr = std::make_unique<int>(10);
ptr.reset(new int(20));  // Releases old memory and assigns new memory
release()
•	Purpose: Releases ownership of the managed resource, returning the raw pointer. The unique_ptr no longer owns the resource, and it’s the programmer's responsibility to delete the resource if necessary.
std::unique_ptr<int> ptr = std::make_unique<int>(10);
int* rawPtr = ptr.release();  // ptr no longer owns the resource

get()
•	Purpose: Returns the raw pointer that unique_ptr is managing, without transferring ownership.


*************************implement unique ptr class**********
#include <iostream>
#include <utility>  // For std::move

template <typename T>
class MyUniquePtr {
private:
    T* ptr;  // Raw pointer to the resource

public:
    // Constructor
    explicit MyUniquePtr(T* p = nullptr) : ptr(p) {}

    // Destructor
    ~MyUniquePtr() {
        delete ptr;  // Automatically deletes the resource when it goes out of scope
    }

    // Move Constructor (Transfers ownership)
    MyUniquePtr(MyUniquePtr&& other) noexcept : ptr(other.ptr) {
        other.ptr = nullptr;  // Set the other ptr to nullptr to avoid double deletion
    }

    // Move Assignment Operator (Transfers ownership)
    MyUniquePtr& operator=(MyUniquePtr&& other) noexcept {
        if (this != &other) {
            delete ptr;  // Delete current resource
            ptr = other.ptr;  // Take ownership of other's resource
            other.ptr = nullptr;  // Set the other ptr to nullptr
        }
        return *this;
    }

    // Deleted Copy Constructor (Prevent copying)
    MyUniquePtr(const MyUniquePtr&) = delete;

    // Deleted Copy Assignment Operator (Prevent copying)
    MyUniquePtr& operator=(const MyUniquePtr&) = delete;

    // Reset the pointer (release current resource and optionally set a new one)
    void reset(T* p = nullptr) {
        delete ptr;  // Release current resource
        ptr = p;  // Assign the new resource (or nullptr)
    }

    // Release the ownership of the resource (returns the raw pointer)
    T* release() {
        T* temp = ptr;
        ptr = nullptr;
        return temp;
    }

    // Access the raw pointer
    T* get() const {
        return ptr;
    }

    // Dereference the pointer
    T& operator*() const {
        return *ptr;
    }

    // Access the object via the arrow operator
    T* operator->() const {
        return ptr;
    }

    // Explicit conversion to bool (checks if the pointer is non-null)
    explicit operator bool() const {
        return ptr != nullptr;
    }
};

// Example usage of MyUniquePtr
int main() {
    MyUniquePtr<int> p1(new int(10));  // p1 owns the int resource

    std::cout << "Value: " << *p1 << std::endl;  // Access the value

    // Move ownership to p2
    MyUniquePtr<int> p2 = std::move(p1);  // p1 is now empty, p2 owns the resource

    if (!p1) {
        std::cout << "p1 is now null." << std::endl;
    }

    std::cout << "Value in p2: " << *p2 << std::endl;

    // Reset p2 to a new resource
    p2.reset(new int(20));
    std::cout << "New value in p2: " << *p2 << std::endl;

    // Release ownership from p2
    int* rawPtr = p2.release();
    std::cout << "Raw pointer value: " << *rawPtr << std::endl;

    delete rawPtr;  // Don't forget to delete manually when ownership is released!

    return 0;
}




 
  





