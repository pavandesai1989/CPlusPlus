
#include <iostream>
#include <cstring>
#include <stdexcept>

class MyString {
private:
    char* data;
    size_t len;

public:
    // Default constructor
    MyString() : data(nullptr), len(0) {}

    // Constructor from C-string
    MyString(const char* str) {
        len = std::strlen(str);
        data = new char[len + 1];
        std::strcpy(data, str);
    }

    // Copy constructor
    MyString(const MyString& other) {
        len = other.len;
        data = new char[len + 1];
        std::strcpy(data, other.data);
    }

    // Copy assignment
    MyString& operator=(const MyString& other) {
        if (this == &other)
            return *this;

        delete[] data;
        len = other.len;
        data = new char[len + 1];
        std::strcpy(data, other.data);
        return *this;
    }

    // Move constructor
    MyString(MyString&& other) noexcept {
        data = other.data;
        len = other.len;
        other.data = nullptr;
        other.len = 0;
    }

    // Move assignment
    MyString& operator=(MyString&& other) noexcept {
        if (this == &other)
            return *this;

        delete[] data;
        data = other.data;
        len = other.len;
        other.data = nullptr;
        other.len = 0;
        return *this;
    }

    // Destructor
    ~MyString() {
        delete[] data;
    }

    // Access operator
    char& operator[](size_t index) {
        if (index >= len) throw std::out_of_range("Index out of range");
        return data[index];
    }

    const char& operator[](size_t index) const {
        if (index >= len) throw std::out_of_range("Index out of range");
        return data[index];
    }

    // String length
    size_t length() const {
        return len;
    }

    bool empty() const {
        return len == 0;
    }

    void print() const {
        std::cout << (data ? data : "") << std::endl;
    }

    // Concatenation
    MyString operator+(const MyString& rhs) const {
        MyString result;
        result.len = len + rhs.len;
        result.data = new char[result.len + 1];
        std::strcpy(result.data, data);
        std::strcat(result.data, rhs.data);
        return result;
    }

    // C-style string getter
    const char* c_str() const {
        return data;
    }
};


int main() {
    MyString s1("Hello");
    MyString s2("World");

    MyString s3 = s1 + MyString(" ") + s2;
    s3.print();  // Hello World

    s3[0] = 'h';
    s3.print();  // hello World

    std::cout << "Length: " << s3.length() << std::endl;

    return 0;
}
