Summary:
UniquePtr gives exclusive ownership.

It can't be copied, only moved.

You can release the pointer (manual control) or reset it.



#include <iostream>

template<typename T>
class UniquePtr {
public:
    // Constructor
    explicit UniquePtr(T* ptr = nullptr) : m_ptr(ptr) {}

    // Destructor
    ~UniquePtr() {
        delete m_ptr;
    }

    // Delete copy constructor and copy assignment
    UniquePtr(const UniquePtr&) = delete;
    UniquePtr& operator=(const UniquePtr&) = delete;

    // Move constructor
    UniquePtr(UniquePtr&& other) noexcept : m_ptr(other.m_ptr) {
        other.m_ptr = nullptr;
    }

    // Move assignment
    UniquePtr& operator=(UniquePtr&& other) noexcept {
        if (this != &other) {
            delete m_ptr;          // Clean up current resource
            m_ptr = other.m_ptr;   // Transfer ownership
            other.m_ptr = nullptr; // Release other's ownership
        }
        return *this;
    }

    // Dereference operator
    T& operator*() const {
        return *m_ptr;
    }

    // Arrow operator
    T* operator->() const {
        return m_ptr;
    }

    // Get the raw pointer
    T* get() const {
        return m_ptr;
    }

    // Release ownership and return the raw pointer
    T* release() {
        T* temp = m_ptr;
        m_ptr = nullptr;
        return temp;
    }

    // Reset with a new raw pointer
    void reset(T* ptr = nullptr) {
        delete m_ptr;
        m_ptr = ptr;
    }

    // Bool conversion for if-checks
    explicit operator bool() const {
        return m_ptr != nullptr;
    }

private:
    T* m_ptr;
};

struct MyClass {
    void greet() {
        std::cout << "Hello from MyClass!" << std::endl;
    }
};

int main() {
    UniquePtr<MyClass> uptr(new MyClass());

    if (uptr) {
        uptr->greet();
    }

    // Transferring ownership
    UniquePtr<MyClass> uptr2 = std::move(uptr);
    if (!uptr) {
        std::cout << "uptr is now empty." << std::endl;
    }

    if (uptr2) {
        uptr2->greet();
    }

    // Reset with a new object
    uptr2.reset(new MyClass());
    uptr2->greet();

    // Release ownership manually
    MyClass* raw = uptr2.release();
    if (!uptr2) {
        std::cout << "uptr2 is now empty after release." << std::endl;
    }

    delete raw; // clean up manually
    return 0;
}

