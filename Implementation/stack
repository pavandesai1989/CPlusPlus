The custom stack uses push_back(), pop_back(), back() — so only containers that support these methods (like vector, deque, list) can be used.

If you try forward_list or array, it won't work — they don’t support push_back()/back().




#include <iostream>
#include <vector>
#include <list>
#include <deque>

using namespace std;

template<typename T, typename Container = deque<T>>
class MyStack {
private:
    Container c;

public:
    void push(const T& val) {
        c.push_back(val);
    }

    void pop() {
        c.pop_back();
    }

    T& top() {
        return c.back();
    }

    const T& top() const {
        return c.back();
    }

    bool empty() const {
        return c.empty();
    }

    size_t size() const {
        return c.size();
    }

    void emplace(const T& val) {
        c.emplace_back(val);
    }

    void swap(MyStack& other) {
        c.swap(other.c);
    }
};


int main() {
    // Using vector
    MyStack<int, vector<int>> s_vector;
    s_vector.push(10);
    s_vector.push(20);
    cout << "Vector Top: " << s_vector.top() << endl;

    // Using list
    MyStack<int, list<int>> s_list;
    s_list.push(100);
    s_list.push(200);
    cout << "List Top: " << s_list.top() << endl;

    // Using default (deque)
    MyStack<int> s_default;
    s_default.push(1);
    s_default.push(2);
    cout << "Default (deque) Top: " << s_default.top() << endl;

    return 0;
}
