The custom stack uses push_back(), pop_back(), back() — 
so only containers that support these methods (like vector, deque, list) can be used.


deque is used by default. next u can use vector and last is list ********
If you try forward_list or array, it won't work — they don’t support push_back()/back().

**********for interview perfect*****
#include <iostream>
#include <vector>
#include <stdexcept>
#include <utility> // for std::move, std::forward

#include <iostream>
#include <vector>
#include <stdexcept>
#include <utility>

template<typename T>
class MyStack {
private:
    std::vector<T> data;

public:
    MyStack() = default;
    MyStack(const MyStack& ob) = default;
    MyStack& operator=(const MyStack& ob) = default;
    MyStack(MyStack&& ob) = default;
    MyStack& operator=(MyStack&& ob) = default;
    ~MyStack() = default;

    void push(const T& val) {
        data.push_back(val);
    }

    void push(T&& val) {
        data.push_back(std::move(val));
    }

    void pop() {
        if (data.empty()) {
            throw std::out_of_range("stack is empty");
        }
        data.pop_back();
    }

    T& top() {
        if (data.empty()) {
            throw std::out_of_range("stack is empty");
        }
        return data.back();
    }

    const T& top() const {
        if (data.empty()) {
            throw std::out_of_range("stack is empty");
        }
        return data.back();
    }

    std::size_t size() const {
        return data.size();
    }

    bool empty() const noexcept {
        return data.empty();
    }

    void clear() noexcept {
        data.clear();
    }
};


int main() {
    MyStack<int> s;
    s.push(10);
    s.push(20);
    s.emplace(30);

    std::cout << "Top: " << s.top() << "\n";  // 30
    s.pop();
    std::cout << "Top after pop: " << s.top() << "\n";  // 20

    std::cout << "Size: " << s.size() << "\n";  // 2
    std::cout << "Is empty: " << std::boolalpha << s.empty() << "\n";  // false

    s.clear();
    std::cout << "Size after clear: " << s.size() << "\n";  // 0

    return 0;
}

MyStack<int> s;
s.push(10);
s.top() = 20; // ✅ Needs non-const version: T& top()

const MyStack<int> cs = s;
int x = cs.top(); // ✅ Needs const version: const T& top() const


***********array*****************
#include <bits/stdc++.h>
using namespace std;

class Stack {
  int size;
  int* arr;
  int top;
public:
  Stack() {
    top = -1;
    size = 1000;
    arr = new int[size];
  }

  void push(int x) {
    if (top == size - 1) {
      cout << "Stack Overflow!" << endl;
      return;
    }
    arr[++top] = x;
  }

  void pop() {
    if (top == -1) {
      cout << "Stack Underflow!" << endl;
      return;
    }
    top--;
  }

  int Top() {
    if (top == -1) {
      cout << "Stack is empty!" << endl;
      return -1;
    }
    return arr[top];
  }

  int Size() {
    return top + 1;
  }
};

int main() {
  Stack s;
  s.push(6);
  s.push(3);
  s.push(7);

  cout << "Top before popping: " << s.Top() << endl;
  cout << "Size before popping: " << s.Size() << endl;

  s.pop();

  cout << "Size after popping: " << s.Size() << endl;
  cout << "Top after popping: " << s.Top() << endl;

  return 0;
}


***********************link list*******
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class Stack {
private:
    Node* topNode;
    int currSize;

public:
    Stack() {
        topNode = nullptr;
        currSize = 0;
    }

    void push(int val) {
        Node* newNode = new Node(val);
        newNode->next = topNode;
        topNode = newNode;
        currSize++;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack Underflow!" << endl;
            return;
        }
        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
        currSize--;
    }

    int top() {
        if (isEmpty()) {
            cout << "Stack is empty!" << endl;
            return -1;
        }
        return topNode->data;
    }

    int size() {
        return currSize;
    }

    bool isEmpty() {
        return topNode == nullptr;
    }

    ~Stack() {
        while (!isEmpty()) {
            pop(); // Clean up memory
        }
    }
};

int main() {
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);

    cout << "Top element: " << s.top() << endl;
    cout << "Size of stack: " << s.size() << endl;

    s.pop();

    cout << "Top after pop: " << s.top() << endl;
    cout << "Size after pop: " << s.size() << endl;

    return 0;
}


********Custom Stack Class Using vector**********
#include <iostream>
#include <vector>

template<typename T>
class MyStack {
private:
    std::vector<T> data;

public:
    void push(const T& val) {
        data.push_back(val);
    }

    void pop() {
        if (!data.empty())
            data.pop_back();
        else
            throw std::out_of_range("Stack is empty");
    }

    T& top() {
        if (!data.empty())
            return data.back();
        throw std::out_of_range("Stack is empty");
    }

    const T& top() const {
        if (!data.empty())
            return data.back();
        throw std::out_of_range("Stack is empty");
    }

    bool empty() const {
        return data.empty();
    }

    size_t size() const {
        return data.size();
    }

    void emplace(const T& val) {
        data.emplace_back(val);
    }

    void swap(MyStack& other) {
        data.swap(other.data);
    }
};

int main() {
    MyStack<int> stack;

    stack.push(10);
    stack.push(20);
    stack.push(30);

    std::cout << "Top: " << stack.top() << "\n";
    stack.pop();
    std::cout << "Top after pop: " << stack.top() << "\n";

    std::cout << "Is empty? " << std::boolalpha << stack.empty() << "\n";
    std::cout << "Size: " << stack.size() << "\n";

    return 0;
}


***********generic implm*******

#include <iostream>
#include <vector>
#include <list>
#include <deque>

using namespace std;

template<typename T, typename Container = deque<T>>
class MyStack {
private:
    Container c;

public:
    void push(const T& val) {
        c.push_back(val);
    }

    void pop() {
        c.pop_back();
    }

    T& top() {
        return c.back();
    }

    const T& top() const {
        return c.back();
    }

    bool empty() const {
        return c.empty();
    }

    size_t size() const {
        return c.size();
    }

    void emplace(const T& val) {
        c.emplace_back(val);
    }

    void swap(MyStack& other) {
        c.swap(other.c);
    }
};


int main() {
    // Using vector
    MyStack<int, vector<int>> s_vector;
    s_vector.push(10);
    s_vector.push(20);
    cout << "Vector Top: " << s_vector.top() << endl;

    // Using list
    MyStack<int, list<int>> s_list;
    s_list.push(100);
    s_list.push(200);
    cout << "List Top: " << s_list.top() << endl;

    // Using default (deque)
    MyStack<int> s_default;
    s_default.push(1);
    s_default.push(2);
    cout << "Default (deque) Top: " << s_default.top() << endl;

    return 0;
}
